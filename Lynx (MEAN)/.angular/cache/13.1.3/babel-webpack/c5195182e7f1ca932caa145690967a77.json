{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n  const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n  const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n  const feedbackLength = convertedFeedback.length;\n  const feedforwardLength = convertedFeedforward.length;\n  const minLength = Math.min(feedbackLength, feedforwardLength);\n\n  if (convertedFeedback[0] !== 1) {\n    for (let i = 0; i < feedbackLength; i += 1) {\n      convertedFeedforward[i] /= convertedFeedback[0];\n    }\n\n    for (let i = 1; i < feedforwardLength; i += 1) {\n      convertedFeedback[i] /= convertedFeedback[0];\n    }\n  }\n\n  const bufferLength = 32;\n  const xBuffer = new Float32Array(bufferLength);\n  const yBuffer = new Float32Array(bufferLength);\n  const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n  const numberOfChannels = renderedBuffer.numberOfChannels;\n\n  for (let i = 0; i < numberOfChannels; i += 1) {\n    const input = renderedBuffer.getChannelData(i);\n    const output = filteredBuffer.getChannelData(i);\n    xBuffer.fill(0);\n    yBuffer.fill(0);\n    filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n  }\n\n  return filteredBuffer;\n};\n\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return (feedback, feedforward) => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let filteredBufferPromise = null;\n\n    const createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeAudioBufferSourceNode = null;\n        let nativeIIRFilterNode = getNativeAudioNode(proxy); // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.\n\n        if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n          nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n            buffer: null,\n            channelCount: 2,\n            channelCountMode: 'max',\n            channelInterpretation: 'speakers',\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            playbackRate: 1\n          });\n        } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n          // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n          nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);\n        }\n\n        renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n\n        if (nativeAudioBufferSourceNode !== null) {\n          if (filteredBufferPromise === null) {\n            if (nativeOfflineAudioContextConstructor === null) {\n              throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n\n            const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n            proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.\n            proxy.context.length, nativeOfflineAudioContext.sampleRate);\n            filteredBufferPromise = _asyncToGenerator(function* () {\n              yield renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n              const renderedBuffer = yield renderNativeOfflineAudioContext(partialOfflineAudioContext);\n              return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n            })();\n          }\n\n          const filteredBuffer = yield filteredBufferPromise;\n          nativeAudioBufferSourceNode.buffer = filteredBuffer;\n          nativeAudioBufferSourceNode.start(0);\n          return nativeAudioBufferSourceNode;\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n        return nativeIIRFilterNode;\n      });\n\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js"],"names":["filterBuffer","isOwnedByContext","filterFullBuffer","renderedBuffer","nativeOfflineAudioContext","feedback","feedforward","convertedFeedback","Float64Array","convertedFeedforward","feedbackLength","length","feedforwardLength","minLength","Math","min","i","bufferLength","xBuffer","Float32Array","yBuffer","filteredBuffer","createBuffer","numberOfChannels","sampleRate","input","getChannelData","output","fill","createIIRFilterNodeRendererFactory","createNativeAudioBufferSourceNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","filteredBufferPromise","createAudioNode","proxy","nativeAudioBufferSourceNode","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","undefined","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","set","Error","partialOfflineAudioContext","context","destination","start","render","renderedNativeAudioNode","get","Promise","resolve"],"mappings":"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","sourcesContent":["import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    const feedbackLength = convertedFeedback.length;\n    const feedforwardLength = convertedFeedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (convertedFeedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            convertedFeedforward[i] /= convertedFeedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            convertedFeedback[i] /= convertedFeedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let filteredBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode = null;\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                });\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n                nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (filteredBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                    // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                    proxy.context.destination.channelCount, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    filteredBufferPromise = (async () => {\n                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                    })();\n                }\n                const filteredBuffer = await filteredBufferPromise;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  return (anyContext, audioData) => {\n    const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext); // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n\n    if (detachedArrayBuffers.has(audioData)) {\n      const err = createDataCloneError();\n      return Promise.reject(err);\n    } // The audioData parameter maybe of a type which can't be added to a WeakSet.\n\n\n    try {\n      detachedArrayBuffers.add(audioData);\n    } catch {// Ignore errors.\n    } // Bug #21: Safari does not support promises yet.\n\n\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n      return nativeContext.decodeAudioData(audioData).then(audioBuffer => {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        detachArrayBuffer(audioData).catch(() => {// Ignore errors.\n        }); // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n\n        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n      });\n    } // Bug #21: Safari does not return a Promise yet.\n\n\n    return new Promise((resolve, reject) => {\n      const complete = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* () {\n          // Bug #133: Safari does neuter the ArrayBuffer.\n          try {\n            yield detachArrayBuffer(audioData);\n          } catch {// Ignore errors.\n          }\n        });\n\n        return function complete() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      const fail = err => {\n        reject(err);\n        complete();\n      }; // Bug #26: Safari throws a synchronous error.\n\n\n      try {\n        // Bug #1: Safari requires a successCallback.\n        nativeContext.decodeAudioData(audioData, audioBuffer => {\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n          }\n\n          audioBufferStore.add(audioBuffer);\n          complete().then(() => resolve(audioBuffer));\n        }, err => {\n          // Bug #4: Safari returns null instead of an error.\n          if (err === null) {\n            fail(createEncodingError());\n          } else {\n            fail(err);\n          }\n        });\n      } catch (err) {\n        fail(err);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js"],"names":["detachArrayBuffer","wrapAudioBufferGetChannelDataMethod","createDecodeAudioData","audioBufferStore","cacheTestResult","createDataCloneError","createEncodingError","detachedArrayBuffers","getNativeContext","isNativeContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testPromiseSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","anyContext","audioData","nativeContext","has","err","Promise","reject","add","decodeAudioData","then","audioBuffer","catch","resolve","complete","fail","copyFromChannel"],"mappings":"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","sourcesContent":["import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n        if (detachedArrayBuffers.has(audioData)) {\n            const err = createDataCloneError();\n            return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            detachedArrayBuffers.add(audioData);\n        }\n        catch {\n            // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            return nativeContext.decodeAudioData(audioData).then((audioBuffer) => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                detachArrayBuffer(audioData).catch(() => {\n                    // Ignore errors.\n                });\n                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n                if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n                audioBufferStore.add(audioBuffer);\n                return audioBuffer;\n            });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = async () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    await detachArrayBuffer(audioData);\n                }\n                catch {\n                    // Ignore errors.\n                }\n            };\n            const fail = (err) => {\n                reject(err);\n                complete();\n            };\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(audioData, (audioBuffer) => {\n                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                    if (typeof audioBuffer.copyFromChannel !== 'function') {\n                        wrapAudioBufferCopyChannelMethods(audioBuffer);\n                        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    }\n                    audioBufferStore.add(audioBuffer);\n                    complete().then(() => resolve(audioBuffer));\n                }, (err) => {\n                    // Bug #4: Safari returns null instead of an error.\n                    if (err === null) {\n                        fail(createEncodingError());\n                    }\n                    else {\n                        fail(err);\n                    }\n                });\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
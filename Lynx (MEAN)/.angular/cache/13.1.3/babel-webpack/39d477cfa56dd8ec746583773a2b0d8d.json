{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeGainNodes = new WeakMap();\n\n    const createGainNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n        if (!nativeGainNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeGainNode.channelCount,\n            channelCountMode: nativeGainNode.channelCountMode,\n            channelInterpretation: nativeGainNode.channelInterpretation,\n            gain: nativeGainNode.gain.value\n          };\n          nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n        if (!nativeGainNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n        return nativeGainNode;\n      });\n\n      return function createGainNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js"],"names":["isOwnedByContext","createGainNodeRendererFactory","connectAudioParam","createNativeGainNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeGainNodes","WeakMap","createGainNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativeGainNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","gain","value","set","render","renderedNativeGainNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,6BAA6B,GAAG,CAACC,iBAAD,EAAoBC,oBAApB,EAA0CC,kBAA1C,EAA8DC,gBAA9D,EAAgFC,uBAAhF,KAA4G;AACrJ,SAAO,MAAM;AACT,UAAMC,uBAAuB,GAAG,IAAIC,OAAJ,EAAhC;;AACA,UAAMC,cAAc;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAA4C;AAC/D,YAAIC,cAAc,GAAGR,kBAAkB,CAACM,KAAD,CAAvC,CAD+D,CAE/D;;AACA,cAAMG,8BAA8B,GAAGb,gBAAgB,CAACY,cAAD,EAAiBD,yBAAjB,CAAvD;;AACA,YAAI,CAACE,8BAAL,EAAqC;AACjC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,cAAc,CAACG,YADjB;AAEZC,YAAAA,gBAAgB,EAAEJ,cAAc,CAACI,gBAFrB;AAGZC,YAAAA,qBAAqB,EAAEL,cAAc,CAACK,qBAH1B;AAIZC,YAAAA,IAAI,EAAEN,cAAc,CAACM,IAAf,CAAoBC;AAJd,WAAhB;AAMAP,UAAAA,cAAc,GAAGT,oBAAoB,CAACQ,yBAAD,EAA4BG,OAA5B,CAArC;AACH;;AACDP,QAAAA,uBAAuB,CAACa,GAAxB,CAA4BT,yBAA5B,EAAuDC,cAAvD;;AACA,YAAI,CAACC,8BAAL,EAAqC;AACjC,gBAAMR,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACQ,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,CAAtB;AACH,SAFD,MAGK;AACD,gBAAMhB,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACQ,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,CAAvB;AACH;;AACD,cAAMZ,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,cAAnC,CAA7B;AACA,eAAOA,cAAP;AACH,OAtBmB;;AAAA,sBAAdH,cAAc;AAAA;AAAA;AAAA,OAApB;;AAuBA,WAAO;AACHY,MAAAA,MAAM,CAACX,KAAD,EAAQC,yBAAR,EAAmC;AACrC,cAAMW,sBAAsB,GAAGf,uBAAuB,CAACgB,GAAxB,CAA4BZ,yBAA5B,CAA/B;;AACA,YAAIW,sBAAsB,KAAKE,SAA/B,EAA0C;AACtC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,sBAAhB,CAAP;AACH;;AACD,eAAOb,cAAc,CAACC,KAAD,EAAQC,yBAAR,CAArB;AACH;;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConstantSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createConstantSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeConstantSourceNode = getNativeAudioNode(proxy);\n        /*\n         * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n         * again.\n         */\n\n        const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n        if (!nativeConstantSourceNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeConstantSourceNode.channelCount,\n            channelCountMode: nativeConstantSourceNode.channelCountMode,\n            channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n            offset: nativeConstantSourceNode.offset.value\n          };\n          nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n          if (start !== null) {\n            nativeConstantSourceNode.start(start);\n          }\n\n          if (stop !== null) {\n            nativeConstantSourceNode.stop(stop);\n          }\n        }\n\n        renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n        if (!nativeConstantSourceNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n        return nativeConstantSourceNode;\n      });\n\n      return function createConstantSourceNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js"],"names":["isOwnedByContext","createConstantSourceNodeRendererFactory","connectAudioParam","createNativeConstantSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeConstantSourceNodes","WeakMap","start","stop","createConstantSourceNode","proxy","nativeOfflineAudioContext","nativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","offset","value","set","render","renderedNativeConstantSourceNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,uCAAuC,GAAG,CAACC,iBAAD,EAAoBC,8BAApB,EAAoDC,kBAApD,EAAwEC,gBAAxE,EAA0FC,uBAA1F,KAAsH;AACzK,SAAO,MAAM;AACT,UAAMC,iCAAiC,GAAG,IAAIC,OAAJ,EAA1C;AACA,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,UAAMC,wBAAwB;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAA4C;AACzE,YAAIC,wBAAwB,GAAGV,kBAAkB,CAACQ,KAAD,CAAjD;AACA;AACZ;AACA;AACA;;AACY,cAAMG,wCAAwC,GAAGf,gBAAgB,CAACc,wBAAD,EAA2BD,yBAA3B,CAAjE;;AACA,YAAI,CAACE,wCAAL,EAA+C;AAC3C,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,wBAAwB,CAACG,YAD3B;AAEZC,YAAAA,gBAAgB,EAAEJ,wBAAwB,CAACI,gBAF/B;AAGZC,YAAAA,qBAAqB,EAAEL,wBAAwB,CAACK,qBAHpC;AAIZC,YAAAA,MAAM,EAAEN,wBAAwB,CAACM,MAAzB,CAAgCC;AAJ5B,WAAhB;AAMAP,UAAAA,wBAAwB,GAAGX,8BAA8B,CAACU,yBAAD,EAA4BG,OAA5B,CAAzD;;AACA,cAAIP,KAAK,KAAK,IAAd,EAAoB;AAChBK,YAAAA,wBAAwB,CAACL,KAAzB,CAA+BA,KAA/B;AACH;;AACD,cAAIC,IAAI,KAAK,IAAb,EAAmB;AACfI,YAAAA,wBAAwB,CAACJ,IAAzB,CAA8BA,IAA9B;AACH;AACJ;;AACDH,QAAAA,iCAAiC,CAACe,GAAlC,CAAsCT,yBAAtC,EAAiEC,wBAAjE;;AACA,YAAI,CAACC,wCAAL,EAA+C;AAC3C,gBAAMV,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACQ,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,CAAtB;AACH,SAFD,MAGK;AACD,gBAAMlB,iBAAiB,CAACW,yBAAD,EAA4BD,KAAK,CAACQ,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,CAAvB;AACH;;AACD,cAAMd,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCC,wBAAnC,CAA7B;AACA,eAAOA,wBAAP;AACH,OA/B6B;;AAAA,sBAAxBH,wBAAwB;AAAA;AAAA;AAAA,OAA9B;;AAgCA,WAAO;AACH,UAAIF,KAAJ,CAAUY,KAAV,EAAiB;AACbZ,QAAAA,KAAK,GAAGY,KAAR;AACH,OAHE;;AAIH,UAAIX,IAAJ,CAASW,KAAT,EAAgB;AACZX,QAAAA,IAAI,GAAGW,KAAP;AACH,OANE;;AAOHE,MAAAA,MAAM,CAACX,KAAD,EAAQC,yBAAR,EAAmC;AACrC,cAAMW,gCAAgC,GAAGjB,iCAAiC,CAACkB,GAAlC,CAAsCZ,yBAAtC,CAAzC;;AACA,YAAIW,gCAAgC,KAAKE,SAAzC,EAAoD;AAChD,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,gCAAhB,CAAP;AACH;;AACD,eAAOb,wBAAwB,CAACC,KAAD,EAAQC,yBAAR,CAA/B;AACH;;AAbE,KAAP;AAeH,GAnDD;AAoDH,CArDM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
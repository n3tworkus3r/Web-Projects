{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeDynamicsCompressorNodes = new WeakMap();\n\n    const createDynamicsCompressorNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n        /*\n         * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n         * created again.\n         */\n\n        const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n        if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n          const options = {\n            attack: nativeDynamicsCompressorNode.attack.value,\n            channelCount: nativeDynamicsCompressorNode.channelCount,\n            channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n            channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n            knee: nativeDynamicsCompressorNode.knee.value,\n            ratio: nativeDynamicsCompressorNode.ratio.value,\n            release: nativeDynamicsCompressorNode.release.value,\n            threshold: nativeDynamicsCompressorNode.threshold.value\n          };\n          nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n        if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n        return nativeDynamicsCompressorNode;\n      });\n\n      return function createDynamicsCompressorNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js"],"names":["isOwnedByContext","createDynamicsCompressorNodeRendererFactory","connectAudioParam","createNativeDynamicsCompressorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeDynamicsCompressorNodes","WeakMap","createDynamicsCompressorNode","proxy","nativeOfflineAudioContext","nativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","options","attack","value","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","set","render","renderedNativeDynamicsCompressorNode","get","undefined","Promise","resolve"],"mappings":"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","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n\n    const createOscillatorNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n        if (!nativeOscillatorNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeOscillatorNode.channelCount,\n            channelCountMode: nativeOscillatorNode.channelCountMode,\n            channelInterpretation: nativeOscillatorNode.channelInterpretation,\n            detune: nativeOscillatorNode.detune.value,\n            frequency: nativeOscillatorNode.frequency.value,\n            periodicWave: periodicWave === null ? undefined : periodicWave,\n            type: nativeOscillatorNode.type\n          };\n          nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n          if (start !== null) {\n            nativeOscillatorNode.start(start);\n          }\n\n          if (stop !== null) {\n            nativeOscillatorNode.stop(stop);\n          }\n        }\n\n        renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n        if (!nativeOscillatorNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n        return nativeOscillatorNode;\n      });\n\n      return function createOscillatorNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js"],"names":["isOwnedByContext","createOscillatorNodeRendererFactory","connectAudioParam","createNativeOscillatorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeOscillatorNodes","WeakMap","periodicWave","start","stop","createOscillatorNode","proxy","nativeOfflineAudioContext","nativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","detune","value","frequency","undefined","type","set","render","renderedNativeOscillatorNode","get","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,mCAAmC,GAAG,CAACC,iBAAD,EAAoBC,0BAApB,EAAgDC,kBAAhD,EAAoEC,gBAApE,EAAsFC,uBAAtF,KAAkH;AACjK,SAAO,MAAM;AACT,UAAMC,6BAA6B,GAAG,IAAIC,OAAJ,EAAtC;AACA,QAAIC,YAAY,GAAG,IAAnB;AACA,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,UAAMC,oBAAoB;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAA4C;AACrE,YAAIC,oBAAoB,GAAGX,kBAAkB,CAACS,KAAD,CAA7C,CADqE,CAErE;;AACA,cAAMG,oCAAoC,GAAGhB,gBAAgB,CAACe,oBAAD,EAAuBD,yBAAvB,CAA7D;;AACA,YAAI,CAACE,oCAAL,EAA2C;AACvC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,oBAAoB,CAACG,YADvB;AAEZC,YAAAA,gBAAgB,EAAEJ,oBAAoB,CAACI,gBAF3B;AAGZC,YAAAA,qBAAqB,EAAEL,oBAAoB,CAACK,qBAHhC;AAIZC,YAAAA,MAAM,EAAEN,oBAAoB,CAACM,MAArB,CAA4BC,KAJxB;AAKZC,YAAAA,SAAS,EAAER,oBAAoB,CAACQ,SAArB,CAA+BD,KAL9B;AAMZb,YAAAA,YAAY,EAAEA,YAAY,KAAK,IAAjB,GAAwBe,SAAxB,GAAoCf,YANtC;AAOZgB,YAAAA,IAAI,EAAEV,oBAAoB,CAACU;AAPf,WAAhB;AASAV,UAAAA,oBAAoB,GAAGZ,0BAA0B,CAACW,yBAAD,EAA4BG,OAA5B,CAAjD;;AACA,cAAIP,KAAK,KAAK,IAAd,EAAoB;AAChBK,YAAAA,oBAAoB,CAACL,KAArB,CAA2BA,KAA3B;AACH;;AACD,cAAIC,IAAI,KAAK,IAAb,EAAmB;AACfI,YAAAA,oBAAoB,CAACJ,IAArB,CAA0BA,IAA1B;AACH;AACJ;;AACDJ,QAAAA,6BAA6B,CAACmB,GAA9B,CAAkCZ,yBAAlC,EAA6DC,oBAA7D;;AACA,YAAI,CAACC,oCAAL,EAA2C;AACvC,gBAAMX,gBAAgB,CAACS,yBAAD,EAA4BD,KAAK,CAACQ,MAAlC,EAA0CN,oBAAoB,CAACM,MAA/D,CAAtB;AACA,gBAAMhB,gBAAgB,CAACS,yBAAD,EAA4BD,KAAK,CAACU,SAAlC,EAA6CR,oBAAoB,CAACQ,SAAlE,CAAtB;AACH,SAHD,MAIK;AACD,gBAAMrB,iBAAiB,CAACY,yBAAD,EAA4BD,KAAK,CAACQ,MAAlC,EAA0CN,oBAAoB,CAACM,MAA/D,CAAvB;AACA,gBAAMnB,iBAAiB,CAACY,yBAAD,EAA4BD,KAAK,CAACU,SAAlC,EAA6CR,oBAAoB,CAACQ,SAAlE,CAAvB;AACH;;AACD,cAAMjB,uBAAuB,CAACO,KAAD,EAAQC,yBAAR,EAAmCC,oBAAnC,CAA7B;AACA,eAAOA,oBAAP;AACH,OAjCyB;;AAAA,sBAApBH,oBAAoB;AAAA;AAAA;AAAA,OAA1B;;AAkCA,WAAO;AACH,UAAIH,YAAJ,CAAiBa,KAAjB,EAAwB;AACpBb,QAAAA,YAAY,GAAGa,KAAf;AACH,OAHE;;AAIH,UAAIZ,KAAJ,CAAUY,KAAV,EAAiB;AACbZ,QAAAA,KAAK,GAAGY,KAAR;AACH,OANE;;AAOH,UAAIX,IAAJ,CAASW,KAAT,EAAgB;AACZX,QAAAA,IAAI,GAAGW,KAAP;AACH,OATE;;AAUHK,MAAAA,MAAM,CAACd,KAAD,EAAQC,yBAAR,EAAmC;AACrC,cAAMc,4BAA4B,GAAGrB,6BAA6B,CAACsB,GAA9B,CAAkCf,yBAAlC,CAArC;;AACA,YAAIc,4BAA4B,KAAKJ,SAArC,EAAgD;AAC5C,iBAAOM,OAAO,CAACC,OAAR,CAAgBH,4BAAhB,CAAP;AACH;;AACD,eAAOhB,oBAAoB,CAACC,KAAD,EAAQC,yBAAR,CAA3B;AACH;;AAhBE,KAAP;AAkBH,GAzDD;AA0DH,CA3DM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
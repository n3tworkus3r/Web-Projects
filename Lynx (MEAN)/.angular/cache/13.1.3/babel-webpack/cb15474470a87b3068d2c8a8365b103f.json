{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConvolverNodes = new WeakMap();\n\n    const createConvolverNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n        if (!nativeConvolverNodeIsOwnedByContext) {\n          const options = {\n            buffer: nativeConvolverNode.buffer,\n            channelCount: nativeConvolverNode.channelCount,\n            channelCountMode: nativeConvolverNode.channelCountMode,\n            channelInterpretation: nativeConvolverNode.channelInterpretation,\n            disableNormalization: !nativeConvolverNode.normalize\n          };\n          nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n        if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n        } else {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n        }\n\n        return nativeConvolverNode;\n      });\n\n      return function createConvolverNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createConvolverNodeRendererFactory","createNativeConvolverNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeConvolverNodes","WeakMap","createConvolverNode","proxy","nativeOfflineAudioContext","nativeConvolverNode","nativeConvolverNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","normalize","set","inputs","render","renderedNativeConvolverNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,kCAAkC,GAAG,CAACC,yBAAD,EAA4BC,kBAA5B,EAAgDC,uBAAhD,KAA4E;AAC1H,SAAO,MAAM;AACT,UAAMC,4BAA4B,GAAG,IAAIC,OAAJ,EAArC;;AACA,UAAMC,mBAAmB;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAA4C;AACpE,YAAIC,mBAAmB,GAAGP,kBAAkB,CAACK,KAAD,CAA5C,CADoE,CAEpE;;AACA,cAAMG,mCAAmC,GAAGX,gBAAgB,CAACU,mBAAD,EAAsBD,yBAAtB,CAA5D;;AACA,YAAI,CAACE,mCAAL,EAA0C;AACtC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,MAAM,EAAEH,mBAAmB,CAACG,MADhB;AAEZC,YAAAA,YAAY,EAAEJ,mBAAmB,CAACI,YAFtB;AAGZC,YAAAA,gBAAgB,EAAEL,mBAAmB,CAACK,gBAH1B;AAIZC,YAAAA,qBAAqB,EAAEN,mBAAmB,CAACM,qBAJ/B;AAKZC,YAAAA,oBAAoB,EAAE,CAACP,mBAAmB,CAACQ;AAL/B,WAAhB;AAOAR,UAAAA,mBAAmB,GAAGR,yBAAyB,CAACO,yBAAD,EAA4BG,OAA5B,CAA/C;AACH;;AACDP,QAAAA,4BAA4B,CAACc,GAA7B,CAAiCV,yBAAjC,EAA4DC,mBAA5D;;AACA,YAAIX,sBAAsB,CAACW,mBAAD,CAA1B,EAAiD;AAC7C,gBAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,mBAAmB,CAACU,MAApB,CAA2B,CAA3B,CAAnC,CAA7B;AACH,SAFD,MAGK;AACD,gBAAMhB,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,mBAAnC,CAA7B;AACH;;AACD,eAAOA,mBAAP;AACH,OAtBwB;;AAAA,sBAAnBH,mBAAmB;AAAA;AAAA;AAAA,OAAzB;;AAuBA,WAAO;AACHc,MAAAA,MAAM,CAACb,KAAD,EAAQC,yBAAR,EAAmC;AACrC,cAAMa,2BAA2B,GAAGjB,4BAA4B,CAACkB,GAA7B,CAAiCd,yBAAjC,CAApC;;AACA,YAAIa,2BAA2B,KAAKE,SAApC,EAA+C;AAC3C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,2BAAhB,CAAP;AACH;;AACD,eAAOf,mBAAmB,CAACC,KAAD,EAAQC,yBAAR,CAA1B;AACH;;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            }\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
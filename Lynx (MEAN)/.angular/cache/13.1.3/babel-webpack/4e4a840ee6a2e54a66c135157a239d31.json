{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeWaveShaperNodes = new WeakMap();\n\n    const createWaveShaperNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n        if (!nativeWaveShaperNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeWaveShaperNode.channelCount,\n            channelCountMode: nativeWaveShaperNode.channelCountMode,\n            channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n            curve: nativeWaveShaperNode.curve,\n            oversample: nativeWaveShaperNode.oversample\n          };\n          nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n        if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n        } else {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n        }\n\n        return nativeWaveShaperNode;\n      });\n\n      return function createWaveShaperNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createWaveShaperNodeRendererFactory","createNativeWaveShaperNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeWaveShaperNodes","WeakMap","createWaveShaperNode","proxy","nativeOfflineAudioContext","nativeWaveShaperNode","nativeWaveShaperNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","curve","oversample","set","inputs","render","renderedNativeWaveShaperNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,mCAAmC,GAAG,CAACC,0BAAD,EAA6BC,kBAA7B,EAAiDC,uBAAjD,KAA6E;AAC5H,SAAO,MAAM;AACT,UAAMC,6BAA6B,GAAG,IAAIC,OAAJ,EAAtC;;AACA,UAAMC,oBAAoB;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAA4C;AACrE,YAAIC,oBAAoB,GAAGP,kBAAkB,CAACK,KAAD,CAA7C,CADqE,CAErE;;AACA,cAAMG,oCAAoC,GAAGX,gBAAgB,CAACU,oBAAD,EAAuBD,yBAAvB,CAA7D;;AACA,YAAI,CAACE,oCAAL,EAA2C;AACvC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,oBAAoB,CAACG,YADvB;AAEZC,YAAAA,gBAAgB,EAAEJ,oBAAoB,CAACI,gBAF3B;AAGZC,YAAAA,qBAAqB,EAAEL,oBAAoB,CAACK,qBAHhC;AAIZC,YAAAA,KAAK,EAAEN,oBAAoB,CAACM,KAJhB;AAKZC,YAAAA,UAAU,EAAEP,oBAAoB,CAACO;AALrB,WAAhB;AAOAP,UAAAA,oBAAoB,GAAGR,0BAA0B,CAACO,yBAAD,EAA4BG,OAA5B,CAAjD;AACH;;AACDP,QAAAA,6BAA6B,CAACa,GAA9B,CAAkCT,yBAAlC,EAA6DC,oBAA7D;;AACA,YAAIX,sBAAsB,CAACW,oBAAD,CAA1B,EAAkD;AAC9C,gBAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,oBAAoB,CAACS,MAArB,CAA4B,CAA5B,CAAnC,CAA7B;AACH,SAFD,MAGK;AACD,gBAAMf,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,oBAAnC,CAA7B;AACH;;AACD,eAAOA,oBAAP;AACH,OAtByB;;AAAA,sBAApBH,oBAAoB;AAAA;AAAA;AAAA,OAA1B;;AAuBA,WAAO;AACHa,MAAAA,MAAM,CAACZ,KAAD,EAAQC,yBAAR,EAAmC;AACrC,cAAMY,4BAA4B,GAAGhB,6BAA6B,CAACiB,GAA9B,CAAkCb,yBAAlC,CAArC;;AACA,YAAIY,4BAA4B,KAAKE,SAArC,EAAgD;AAC5C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,4BAAhB,CAAP;AACH;;AACD,eAAOd,oBAAoB,CAACC,KAAD,EAAQC,yBAAR,CAA3B;AACH;;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
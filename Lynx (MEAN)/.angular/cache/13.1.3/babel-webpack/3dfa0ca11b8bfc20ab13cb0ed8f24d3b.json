{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeStereoPannerNodes = new WeakMap();\n\n    const createStereoPannerNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeStereoPannerNode = getNativeAudioNode(proxy);\n        /*\n         * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n         * again.\n         */\n\n        const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n        if (!nativeStereoPannerNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeStereoPannerNode.channelCount,\n            channelCountMode: nativeStereoPannerNode.channelCountMode,\n            channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n            pan: nativeStereoPannerNode.pan.value\n          };\n          nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n        if (!nativeStereoPannerNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n        }\n\n        if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n        } else {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n        }\n\n        return nativeStereoPannerNode;\n      });\n\n      return function createStereoPannerNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createStereoPannerNodeRendererFactory","connectAudioParam","createNativeStereoPannerNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeStereoPannerNodes","WeakMap","createStereoPannerNode","proxy","nativeOfflineAudioContext","nativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","pan","value","set","inputs","render","renderedNativeStereoPannerNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,qCAAqC,GAAG,CAACC,iBAAD,EAAoBC,4BAApB,EAAkDC,kBAAlD,EAAsEC,gBAAtE,EAAwFC,uBAAxF,KAAoH;AACrK,SAAO,MAAM;AACT,UAAMC,+BAA+B,GAAG,IAAIC,OAAJ,EAAxC;;AACA,UAAMC,sBAAsB;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAA4C;AACvE,YAAIC,sBAAsB,GAAGR,kBAAkB,CAACM,KAAD,CAA/C;AACA;AACZ;AACA;AACA;;AACY,cAAMG,sCAAsC,GAAGb,gBAAgB,CAACY,sBAAD,EAAyBD,yBAAzB,CAA/D;;AACA,YAAI,CAACE,sCAAL,EAA6C;AACzC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,sBAAsB,CAACG,YADzB;AAEZC,YAAAA,gBAAgB,EAAEJ,sBAAsB,CAACI,gBAF7B;AAGZC,YAAAA,qBAAqB,EAAEL,sBAAsB,CAACK,qBAHlC;AAIZC,YAAAA,GAAG,EAAEN,sBAAsB,CAACM,GAAvB,CAA2BC;AAJpB,WAAhB;AAMAP,UAAAA,sBAAsB,GAAGT,4BAA4B,CAACQ,yBAAD,EAA4BG,OAA5B,CAArD;AACH;;AACDP,QAAAA,+BAA+B,CAACa,GAAhC,CAAoCT,yBAApC,EAA+DC,sBAA/D;;AACA,YAAI,CAACC,sCAAL,EAA6C;AACzC,gBAAMR,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACQ,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,CAAtB;AACH,SAFD,MAGK;AACD,gBAAMhB,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACQ,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,CAAvB;AACH;;AACD,YAAInB,sBAAsB,CAACa,sBAAD,CAA1B,EAAoD;AAChD,gBAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,sBAAsB,CAACS,MAAvB,CAA8B,CAA9B,CAAnC,CAA7B;AACH,SAFD,MAGK;AACD,gBAAMf,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,sBAAnC,CAA7B;AACH;;AACD,eAAOA,sBAAP;AACH,OA9B2B;;AAAA,sBAAtBH,sBAAsB;AAAA;AAAA;AAAA,OAA5B;;AA+BA,WAAO;AACHa,MAAAA,MAAM,CAACZ,KAAD,EAAQC,yBAAR,EAAmC;AACrC,cAAMY,8BAA8B,GAAGhB,+BAA+B,CAACiB,GAAhC,CAAoCb,yBAApC,CAAvC;;AACA,YAAIY,8BAA8B,KAAKE,SAAvC,EAAkD;AAC9C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,8BAAhB,CAAP;AACH;;AACD,eAAOd,sBAAsB,CAACC,KAAD,EAAQC,yBAAR,CAA7B;AACH;;AAPE,KAAP;AASH,GA1CD;AA2CH,CA5CM","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
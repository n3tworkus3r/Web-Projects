{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return maxDelayTime => {\n    const renderedNativeDelayNodes = new WeakMap();\n\n    const createDelayNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n        if (!nativeDelayNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeDelayNode.channelCount,\n            channelCountMode: nativeDelayNode.channelCountMode,\n            channelInterpretation: nativeDelayNode.channelInterpretation,\n            delayTime: nativeDelayNode.delayTime.value,\n            maxDelayTime\n          };\n          nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n        if (!nativeDelayNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n        return nativeDelayNode;\n      });\n\n      return function createDelayNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js"],"names":["isOwnedByContext","createDelayNodeRendererFactory","connectAudioParam","createNativeDelayNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","maxDelayTime","renderedNativeDelayNodes","WeakMap","createDelayNode","proxy","nativeOfflineAudioContext","nativeDelayNode","nativeDelayNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","delayTime","value","set","render","renderedNativeDelayNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,8BAA8B,GAAG,CAACC,iBAAD,EAAoBC,qBAApB,EAA2CC,kBAA3C,EAA+DC,gBAA/D,EAAiFC,uBAAjF,KAA6G;AACvJ,SAAQC,YAAD,IAAkB;AACrB,UAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;AACA,UAAMC,eAAe;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAA4C;AAChE,YAAIC,eAAe,GAAGT,kBAAkB,CAACO,KAAD,CAAxC,CADgE,CAEhE;;AACA,cAAMG,+BAA+B,GAAGd,gBAAgB,CAACa,eAAD,EAAkBD,yBAAlB,CAAxD;;AACA,YAAI,CAACE,+BAAL,EAAsC;AAClC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,eAAe,CAACG,YADlB;AAEZC,YAAAA,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;AAGZC,YAAAA,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;AAIZC,YAAAA,SAAS,EAAEN,eAAe,CAACM,SAAhB,CAA0BC,KAJzB;AAKZb,YAAAA;AALY,WAAhB;AAOAM,UAAAA,eAAe,GAAGV,qBAAqB,CAACS,yBAAD,EAA4BG,OAA5B,CAAvC;AACH;;AACDP,QAAAA,wBAAwB,CAACa,GAAzB,CAA6BT,yBAA7B,EAAwDC,eAAxD;;AACA,YAAI,CAACC,+BAAL,EAAsC;AAClC,gBAAMT,gBAAgB,CAACO,yBAAD,EAA4BD,KAAK,CAACQ,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,CAAtB;AACH,SAFD,MAGK;AACD,gBAAMjB,iBAAiB,CAACU,yBAAD,EAA4BD,KAAK,CAACQ,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,CAAvB;AACH;;AACD,cAAMb,uBAAuB,CAACK,KAAD,EAAQC,yBAAR,EAAmCC,eAAnC,CAA7B;AACA,eAAOA,eAAP;AACH,OAvBoB;;AAAA,sBAAfH,eAAe;AAAA;AAAA;AAAA,OAArB;;AAwBA,WAAO;AACHY,MAAAA,MAAM,CAACX,KAAD,EAAQC,yBAAR,EAAmC;AACrC,cAAMW,uBAAuB,GAAGf,wBAAwB,CAACgB,GAAzB,CAA6BZ,yBAA7B,CAAhC;;AACA,YAAIW,uBAAuB,KAAKE,SAAhC,EAA2C;AACvC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;AACH;;AACD,eAAOb,eAAe,CAACC,KAAD,EAAQC,yBAAR,CAAtB;AACH;;AAPE,KAAP;AASH,GAnCD;AAoCH,CArCM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
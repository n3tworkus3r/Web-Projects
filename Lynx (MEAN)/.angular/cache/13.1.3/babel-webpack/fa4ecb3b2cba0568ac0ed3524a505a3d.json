{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n\n    const createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n        if (!nativeAudioNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeAudioNode.channelCount,\n            channelCountMode: nativeAudioNode.channelCountMode,\n            channelInterpretation: nativeAudioNode.channelInterpretation,\n            numberOfOutputs: nativeAudioNode.numberOfOutputs\n          };\n          nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n        return nativeAudioNode;\n      });\n\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js"],"names":["isOwnedByContext","createChannelSplitterNodeRendererFactory","createNativeChannelSplitterNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAudioNodes","WeakMap","createAudioNode","proxy","nativeOfflineAudioContext","nativeAudioNode","nativeAudioNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","numberOfOutputs","set","render","renderedNativeAudioNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,wCAAwC,GAAG,CAACC,+BAAD,EAAkCC,kBAAlC,EAAsDC,uBAAtD,KAAkF;AACtI,SAAO,MAAM;AACT,UAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;AACA,UAAMC,eAAe;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAA4C;AAChE,YAAIC,eAAe,GAAGP,kBAAkB,CAACK,KAAD,CAAxC,CADgE,CAEhE;;AACA,cAAMG,+BAA+B,GAAGX,gBAAgB,CAACU,eAAD,EAAkBD,yBAAlB,CAAxD;;AACA,YAAI,CAACE,+BAAL,EAAsC;AAClC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,eAAe,CAACG,YADlB;AAEZC,YAAAA,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;AAGZC,YAAAA,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;AAIZC,YAAAA,eAAe,EAAEN,eAAe,CAACM;AAJrB,WAAhB;AAMAN,UAAAA,eAAe,GAAGR,+BAA+B,CAACO,yBAAD,EAA4BG,OAA5B,CAAjD;AACH;;AACDP,QAAAA,wBAAwB,CAACY,GAAzB,CAA6BR,yBAA7B,EAAwDC,eAAxD;AACA,cAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,eAAnC,CAA7B;AACA,eAAOA,eAAP;AACH,OAhBoB;;AAAA,sBAAfH,eAAe;AAAA;AAAA;AAAA,OAArB;;AAiBA,WAAO;AACHW,MAAAA,MAAM,CAACV,KAAD,EAAQC,yBAAR,EAAmC;AACrC,cAAMU,uBAAuB,GAAGd,wBAAwB,CAACe,GAAzB,CAA6BX,yBAA7B,CAAhC;;AACA,YAAIU,uBAAuB,KAAKE,SAAhC,EAA2C;AACvC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;AACH;;AACD,eAAOZ,eAAe,CAACC,KAAD,EAAQC,yBAAR,CAAtB;AACH;;AAPE,KAAP;AASH,GA5BD;AA6BH,CA9BM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
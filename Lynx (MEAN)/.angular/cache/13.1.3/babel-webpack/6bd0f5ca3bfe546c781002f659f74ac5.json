{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeBiquadFilterNodes = new WeakMap();\n\n    const createBiquadFilterNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n        /*\n         * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n         * again.\n         */\n\n        const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n        if (!nativeBiquadFilterNodeIsOwnedByContext) {\n          const options = {\n            Q: nativeBiquadFilterNode.Q.value,\n            channelCount: nativeBiquadFilterNode.channelCount,\n            channelCountMode: nativeBiquadFilterNode.channelCountMode,\n            channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n            detune: nativeBiquadFilterNode.detune.value,\n            frequency: nativeBiquadFilterNode.frequency.value,\n            gain: nativeBiquadFilterNode.gain.value,\n            type: nativeBiquadFilterNode.type\n          };\n          nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n        if (!nativeBiquadFilterNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n        return nativeBiquadFilterNode;\n      });\n\n      return function createBiquadFilterNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js"],"names":["isOwnedByContext","createBiquadFilterNodeRendererFactory","connectAudioParam","createNativeBiquadFilterNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeBiquadFilterNodes","WeakMap","createBiquadFilterNode","proxy","nativeOfflineAudioContext","nativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","options","Q","value","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","set","render","renderedNativeBiquadFilterNode","get","undefined","Promise","resolve"],"mappings":"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","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\n/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return /*#__PURE__*/_asyncToGenerator(function* () {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n\n    const blob = new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    const messageChannel = new MessageChannel(); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isCallingProcess = false;\n\n    try {\n      yield offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n      yield new Promise(resolve => {\n        audioWorkletNode.port.onmessage = () => resolve();\n\n        audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n      });\n\n      audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      yield offlineAudioContext.startRendering();\n      isCallingProcess = yield new Promise(resolve => {\n        messageChannel.port1.onmessage = ({\n          data\n        }) => resolve(data === 1);\n\n        messageChannel.port1.postMessage(0);\n      });\n    } catch {// Ignore errors.\n    } finally {\n      messageChannel.port1.close();\n      URL.revokeObjectURL(url);\n    }\n\n    return isCallingProcess;\n  });\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js"],"names":["createTestAudioWorkletProcessorNoOutputsSupport","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","blob","Blob","type","messageChannel","MessageChannel","offlineAudioContext","url","URL","createObjectURL","isCallingProcess","audioWorklet","addModule","audioWorkletNode","numberOfOutputs","oscillator","createOscillator","Promise","resolve","port","onmessage","postMessage","port2","connect","start","startRendering","port1","data","close","revokeObjectURL"],"mappings":";;AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,+CAA+C,GAAG,CAACC,iCAAD,EAAoCC,oCAApC,KAA6E;AACxI,wCAAO,aAAY;AACf;AACA,QAAID,iCAAiC,KAAK,IAA1C,EAAgD;AAC5C,aAAO,IAAP;AACH;;AACD,QAAIC,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C,aAAO,KAAP;AACH;;AACD,UAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAClB,uNADkB,CAAT,EAEV;AACCC,MAAAA,IAAI,EAAE;AADP,KAFU,CAAb;AAKA,UAAMC,cAAc,GAAG,IAAIC,cAAJ,EAAvB,CAbe,CAcf;;AACA,UAAMC,mBAAmB,GAAG,IAAIN,oCAAJ,CAAyC,CAAzC,EAA4C,GAA5C,EAAiD,KAAjD,CAA5B;AACA,UAAMO,GAAG,GAAGC,GAAG,CAACC,eAAJ,CAAoBR,IAApB,CAAZ;AACA,QAAIS,gBAAgB,GAAG,KAAvB;;AACA,QAAI;AACA,YAAMJ,mBAAmB,CAACK,YAApB,CAAiCC,SAAjC,CAA2CL,GAA3C,CAAN;AACA,YAAMM,gBAAgB,GAAG,IAAId,iCAAJ,CAAsCO,mBAAtC,EAA2D,GAA3D,EAAgE;AAAEQ,QAAAA,eAAe,EAAE;AAAnB,OAAhE,CAAzB;AACA,YAAMC,UAAU,GAAGT,mBAAmB,CAACU,gBAApB,EAAnB;AACA,YAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC3BL,QAAAA,gBAAgB,CAACM,IAAjB,CAAsBC,SAAtB,GAAkC,MAAMF,OAAO,EAA/C;;AACAL,QAAAA,gBAAgB,CAACM,IAAjB,CAAsBE,WAAtB,CAAkCjB,cAAc,CAACkB,KAAjD,EAAwD,CAAClB,cAAc,CAACkB,KAAhB,CAAxD;AACH,OAHK,CAAN;;AAIAT,MAAAA,gBAAgB,CAACM,IAAjB,CAAsBC,SAAtB,GAAkC,MAAOV,gBAAgB,GAAG,IAA5D;;AACAK,MAAAA,UAAU,CAACQ,OAAX,CAAmBV,gBAAnB;AACAE,MAAAA,UAAU,CAACS,KAAX,CAAiB,CAAjB;AACA,YAAMlB,mBAAmB,CAACmB,cAApB,EAAN;AACAf,MAAAA,gBAAgB,SAAS,IAAIO,OAAJ,CAAaC,OAAD,IAAa;AAC9Cd,QAAAA,cAAc,CAACsB,KAAf,CAAqBN,SAArB,GAAiC,CAAC;AAAEO,UAAAA;AAAF,SAAD,KAAcT,OAAO,CAACS,IAAI,KAAK,CAAV,CAAtD;;AACAvB,QAAAA,cAAc,CAACsB,KAAf,CAAqBL,WAArB,CAAiC,CAAjC;AACH,OAHwB,CAAzB;AAIH,KAhBD,CAiBA,MAAM,CACF;AACH,KAnBD,SAoBQ;AACJjB,MAAAA,cAAc,CAACsB,KAAf,CAAqBE,KAArB;AACApB,MAAAA,GAAG,CAACqB,eAAJ,CAAoBtB,GAApB;AACH;;AACD,WAAOG,gBAAP;AACH,GA3CD;AA4CH,CA7CM","sourcesContent":["/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob([\n            'let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'\n        ], {\n            type: 'application/javascript; charset=utf-8'\n        });\n        const messageChannel = new MessageChannel();\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n        let isCallingProcess = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n            await new Promise((resolve) => {\n                audioWorkletNode.port.onmessage = () => resolve();\n                audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n            });\n            audioWorkletNode.port.onmessage = () => (isCallingProcess = true);\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n            await offlineAudioContext.startRendering();\n            isCallingProcess = await new Promise((resolve) => {\n                messageChannel.port1.onmessage = ({ data }) => resolve(data === 1);\n                messageChannel.port1.postMessage(0);\n            });\n        }\n        catch {\n            // Ignore errors.\n        }\n        finally {\n            messageChannel.port1.close();\n            URL.revokeObjectURL(url);\n        }\n        return isCallingProcess;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAnalyserNodes = new WeakMap();\n\n    const createAnalyserNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n        if (!nativeAnalyserNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeAnalyserNode.channelCount,\n            channelCountMode: nativeAnalyserNode.channelCountMode,\n            channelInterpretation: nativeAnalyserNode.channelInterpretation,\n            fftSize: nativeAnalyserNode.fftSize,\n            maxDecibels: nativeAnalyserNode.maxDecibels,\n            minDecibels: nativeAnalyserNode.minDecibels,\n            smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n          };\n          nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n        return nativeAnalyserNode;\n      });\n\n      return function createAnalyserNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n\n        return createAnalyserNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js"],"names":["isOwnedByContext","createAnalyserNodeRendererFactory","createNativeAnalyserNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAnalyserNodes","WeakMap","createAnalyserNode","proxy","nativeOfflineAudioContext","nativeAnalyserNode","nativeAnalyserNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","set","render","renderedNativeAnalyserNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,iCAAiC,GAAG,CAACC,wBAAD,EAA2BC,kBAA3B,EAA+CC,uBAA/C,KAA2E;AACxH,SAAO,MAAM;AACT,UAAMC,2BAA2B,GAAG,IAAIC,OAAJ,EAApC;;AACA,UAAMC,kBAAkB;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAA4C;AACnE,YAAIC,kBAAkB,GAAGP,kBAAkB,CAACK,KAAD,CAA3C,CADmE,CAEnE;;AACA,cAAMG,kCAAkC,GAAGX,gBAAgB,CAACU,kBAAD,EAAqBD,yBAArB,CAA3D;;AACA,YAAI,CAACE,kCAAL,EAAyC;AACrC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,kBAAkB,CAACG,YADrB;AAEZC,YAAAA,gBAAgB,EAAEJ,kBAAkB,CAACI,gBAFzB;AAGZC,YAAAA,qBAAqB,EAAEL,kBAAkB,CAACK,qBAH9B;AAIZC,YAAAA,OAAO,EAAEN,kBAAkB,CAACM,OAJhB;AAKZC,YAAAA,WAAW,EAAEP,kBAAkB,CAACO,WALpB;AAMZC,YAAAA,WAAW,EAAER,kBAAkB,CAACQ,WANpB;AAOZC,YAAAA,qBAAqB,EAAET,kBAAkB,CAACS;AAP9B,WAAhB;AASAT,UAAAA,kBAAkB,GAAGR,wBAAwB,CAACO,yBAAD,EAA4BG,OAA5B,CAA7C;AACH;;AACDP,QAAAA,2BAA2B,CAACe,GAA5B,CAAgCX,yBAAhC,EAA2DC,kBAA3D;AACA,cAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,kBAAnC,CAA7B;AACA,eAAOA,kBAAP;AACH,OAnBuB;;AAAA,sBAAlBH,kBAAkB;AAAA;AAAA;AAAA,OAAxB;;AAoBA,WAAO;AACHc,MAAAA,MAAM,CAACb,KAAD,EAAQC,yBAAR,EAAmC;AACrC,cAAMa,0BAA0B,GAAGjB,2BAA2B,CAACkB,GAA5B,CAAgCd,yBAAhC,CAAnC;;AACA,YAAIa,0BAA0B,KAAKE,SAAnC,EAA8C;AAC1C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,0BAAhB,CAAP;AACH;;AACD,eAAOf,kBAAkB,CAACC,KAAD,EAAQC,yBAAR,CAAzB;AACH;;AAPE,KAAP;AASH,GA/BD;AAgCH,CAjCM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
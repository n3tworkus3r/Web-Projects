{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let renderedBufferPromise = null;\n\n    const createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeGainNode = null;\n        let nativePannerNode = getNativeAudioNode(proxy);\n        const commonAudioNodeOptions = {\n          channelCount: nativePannerNode.channelCount,\n          channelCountMode: nativePannerNode.channelCountMode,\n          channelInterpretation: nativePannerNode.channelInterpretation\n        };\n        const commonNativePannerNodeOptions = { ...commonAudioNodeOptions,\n          coneInnerAngle: nativePannerNode.coneInnerAngle,\n          coneOuterAngle: nativePannerNode.coneOuterAngle,\n          coneOuterGain: nativePannerNode.coneOuterGain,\n          distanceModel: nativePannerNode.distanceModel,\n          maxDistance: nativePannerNode.maxDistance,\n          panningModel: nativePannerNode.panningModel,\n          refDistance: nativePannerNode.refDistance,\n          rolloffFactor: nativePannerNode.rolloffFactor\n        }; // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n\n        if ('bufferSize' in nativePannerNode) {\n          nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n            gain: 1\n          });\n        } else if (!nativePannerNodeIsOwnedByContext) {\n          const options = { ...commonNativePannerNodeOptions,\n            orientationX: nativePannerNode.orientationX.value,\n            orientationY: nativePannerNode.orientationY.value,\n            orientationZ: nativePannerNode.orientationZ.value,\n            positionX: nativePannerNode.positionX.value,\n            positionY: nativePannerNode.positionY.value,\n            positionZ: nativePannerNode.positionZ.value\n          };\n          nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n        if (nativeGainNode !== null) {\n          if (renderedBufferPromise === null) {\n            if (nativeOfflineAudioContextConstructor === null) {\n              throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n\n            const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, // Bug #17: Safari does not yet expose the length.\n            proxy.context.length, nativeOfflineAudioContext.sampleRate);\n            const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n              channelCount: 1,\n              channelCountMode: 'explicit',\n              channelInterpretation: 'speakers',\n              numberOfInputs: 6\n            });\n            nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n            renderedBufferPromise = _asyncToGenerator(function* () {\n              const nativeConstantSourceNodes = yield Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator(function* (audioParam, index) {\n                  const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: index === 0 ? 1 : 0\n                  });\n                  yield renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n                  return nativeConstantSourceNode;\n                });\n\n                return function (_x3, _x4) {\n                  return _ref3.apply(this, arguments);\n                };\n              }()));\n\n              for (let i = 0; i < 6; i += 1) {\n                nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                nativeConstantSourceNodes[i].start(0);\n              }\n\n              return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n            })();\n          }\n\n          const renderedBuffer = yield renderedBufferPromise;\n          const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n            gain: 1\n          });\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n          const channelDatas = [];\n\n          for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n            channelDatas.push(renderedBuffer.getChannelData(i));\n          }\n\n          let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n          let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n          let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n            gain: 1\n          });\n          let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,\n            orientationX: lastOrientation[0],\n            orientationY: lastOrientation[1],\n            orientationZ: lastOrientation[2],\n            positionX: lastPosition[0],\n            positionY: lastPosition[1],\n            positionZ: lastPosition[2]\n          });\n          inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n          partialPannerNode.connect(nativeGainNode);\n\n          for (let i = 128; i < renderedBuffer.length; i += 128) {\n            const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n            const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n\n            if (orientation.some((value, index) => value !== lastOrientation[index]) || positon.some((value, index) => value !== lastPosition[index])) {\n              lastOrientation = orientation;\n              lastPosition = positon;\n              const currentTime = i / nativeOfflineAudioContext.sampleRate;\n              gateGainNode.gain.setValueAtTime(0, currentTime);\n              gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,\n                gain: 0\n              });\n              partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,\n                orientationX: lastOrientation[0],\n                orientationY: lastOrientation[1],\n                orientationZ: lastOrientation[2],\n                positionX: lastPosition[0],\n                positionY: lastPosition[1],\n                positionZ: lastPosition[2]\n              });\n              gateGainNode.gain.setValueAtTime(1, currentTime);\n              inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n              partialPannerNode.connect(nativeGainNode);\n            }\n          }\n\n          return nativeGainNode;\n        }\n\n        if (!nativePannerNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n        }\n\n        if (isNativeAudioNodeFaker(nativePannerNode)) {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n        } else {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n        }\n\n        return nativePannerNode;\n      });\n\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createPannerNodeRendererFactory","connectAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeGainNode","createNativePannerNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderAutomation","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","renderedBufferPromise","createAudioNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativePannerNode","commonAudioNodeOptions","channelCount","channelCountMode","channelInterpretation","commonNativePannerNodeOptions","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","nativePannerNodeIsOwnedByContext","gain","options","orientationX","value","orientationY","orientationZ","positionX","positionY","positionZ","set","Error","partialOfflineAudioContext","context","length","sampleRate","nativeChannelMergerNode","numberOfInputs","connect","destination","nativeConstantSourceNodes","Promise","all","map","audioParam","index","nativeConstantSourceNode","offset","i","start","renderedBuffer","inputGainNode","channelDatas","numberOfChannels","push","getChannelData","lastOrientation","lastPosition","gateGainNode","partialPannerNode","inputs","orientation","positon","some","currentTime","setValueAtTime","render","renderedNativeGainNodeOrNativePannerNode","get","undefined","resolve"],"mappings":"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","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let renderedBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeGainNode = null;\n            let nativePannerNode = getNativeAudioNode(proxy);\n            const commonAudioNodeOptions = {\n                channelCount: nativePannerNode.channelCount,\n                channelCountMode: nativePannerNode.channelCountMode,\n                channelInterpretation: nativePannerNode.channelInterpretation\n            };\n            const commonNativePannerNodeOptions = {\n                ...commonAudioNodeOptions,\n                coneInnerAngle: nativePannerNode.coneInnerAngle,\n                coneOuterAngle: nativePannerNode.coneOuterAngle,\n                coneOuterGain: nativePannerNode.coneOuterGain,\n                distanceModel: nativePannerNode.distanceModel,\n                maxDistance: nativePannerNode.maxDistance,\n                panningModel: nativePannerNode.panningModel,\n                refDistance: nativePannerNode.refDistance,\n                rolloffFactor: nativePannerNode.rolloffFactor\n            };\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n            if ('bufferSize' in nativePannerNode) {\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n            }\n            else if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n            if (nativeGainNode !== null) {\n                if (renderedBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: 6\n                    });\n                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                    renderedBufferPromise = (async () => {\n                        const nativeConstantSourceNodes = await Promise.all([\n                            proxy.orientationX,\n                            proxy.orientationY,\n                            proxy.orientationZ,\n                            proxy.positionX,\n                            proxy.positionY,\n                            proxy.positionZ\n                        ].map(async (audioParam, index) => {\n                            const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                channelCount: 1,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                offset: index === 0 ? 1 : 0\n                            });\n                            await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n                            return nativeConstantSourceNode;\n                        }));\n                        for (let i = 0; i < 6; i += 1) {\n                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                            nativeConstantSourceNodes[i].start(0);\n                        }\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    })();\n                }\n                const renderedBuffer = await renderedBufferPromise;\n                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n                const channelDatas = [];\n                for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                    channelDatas.push(renderedBuffer.getChannelData(i));\n                }\n                let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                });\n                inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                partialPannerNode.connect(nativeGainNode);\n                for (let i = 128; i < renderedBuffer.length; i += 128) {\n                    const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n                    const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n                    if (orientation.some((value, index) => value !== lastOrientation[index]) ||\n                        positon.some((value, index) => value !== lastPosition[index])) {\n                        lastOrientation = orientation;\n                        lastPosition = positon;\n                        const currentTime = i / nativeOfflineAudioContext.sampleRate;\n                        gateGainNode.gain.setValueAtTime(0, currentTime);\n                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });\n                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                            ...commonNativePannerNodeOptions,\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                        });\n                        gateGainNode.gain.setValueAtTime(1, currentTime);\n                        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                        partialPannerNode.connect(nativeGainNode);\n                    }\n                }\n                return nativeGainNode;\n            }\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
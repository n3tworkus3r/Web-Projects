{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Repositories\\\\Web-Projects\\\\Lynx (MEAN)\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioBufferSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createAudioBufferSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext) {\n        let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n        /*\n         * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n         * again.\n         */\n\n        const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n        if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n          const options = {\n            buffer: nativeAudioBufferSourceNode.buffer,\n            channelCount: nativeAudioBufferSourceNode.channelCount,\n            channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n            channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n            // Bug #149: Safari does not yet support the detune AudioParam.\n            loop: nativeAudioBufferSourceNode.loop,\n            loopEnd: nativeAudioBufferSourceNode.loopEnd,\n            loopStart: nativeAudioBufferSourceNode.loopStart,\n            playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n          };\n          nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n          if (start !== null) {\n            nativeAudioBufferSourceNode.start(...start);\n          }\n\n          if (stop !== null) {\n            nativeAudioBufferSourceNode.stop(stop);\n          }\n        }\n\n        renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n        if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n          // Bug #149: Safari does not yet support the detune AudioParam.\n          yield renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n        } else {\n          // Bug #149: Safari does not yet support the detune AudioParam.\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n        return nativeAudioBufferSourceNode;\n      });\n\n      return function createAudioBufferSourceNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n      }\n\n    };\n  };\n};","map":{"version":3,"sources":["D:/Repositories/Web-Projects/Lynx (MEAN)/node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js"],"names":["isOwnedByContext","createAudioBufferSourceNodeRendererFactory","connectAudioParam","createNativeAudioBufferSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeAudioBufferSourceNodes","WeakMap","start","stop","createAudioBufferSourceNode","proxy","nativeOfflineAudioContext","nativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","value","set","render","renderedNativeAudioBufferSourceNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,0CAA0C,GAAG,CAACC,iBAAD,EAAoBC,iCAApB,EAAuDC,kBAAvD,EAA2EC,gBAA3E,EAA6FC,uBAA7F,KAAyH;AAC/K,SAAO,MAAM;AACT,UAAMC,oCAAoC,GAAG,IAAIC,OAAJ,EAA7C;AACA,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,UAAMC,2BAA2B;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAA4C;AAC5E,YAAIC,2BAA2B,GAAGV,kBAAkB,CAACQ,KAAD,CAApD;AACA;AACZ;AACA;AACA;;AACY,cAAMG,2CAA2C,GAAGf,gBAAgB,CAACc,2BAAD,EAA8BD,yBAA9B,CAApE;;AACA,YAAI,CAACE,2CAAL,EAAkD;AAC9C,gBAAMC,OAAO,GAAG;AACZC,YAAAA,MAAM,EAAEH,2BAA2B,CAACG,MADxB;AAEZC,YAAAA,YAAY,EAAEJ,2BAA2B,CAACI,YAF9B;AAGZC,YAAAA,gBAAgB,EAAEL,2BAA2B,CAACK,gBAHlC;AAIZC,YAAAA,qBAAqB,EAAEN,2BAA2B,CAACM,qBAJvC;AAKZ;AACAC,YAAAA,IAAI,EAAEP,2BAA2B,CAACO,IANtB;AAOZC,YAAAA,OAAO,EAAER,2BAA2B,CAACQ,OAPzB;AAQZC,YAAAA,SAAS,EAAET,2BAA2B,CAACS,SAR3B;AASZC,YAAAA,YAAY,EAAEV,2BAA2B,CAACU,YAA5B,CAAyCC;AAT3C,WAAhB;AAWAX,UAAAA,2BAA2B,GAAGX,iCAAiC,CAACU,yBAAD,EAA4BG,OAA5B,CAA/D;;AACA,cAAIP,KAAK,KAAK,IAAd,EAAoB;AAChBK,YAAAA,2BAA2B,CAACL,KAA5B,CAAkC,GAAGA,KAArC;AACH;;AACD,cAAIC,IAAI,KAAK,IAAb,EAAmB;AACfI,YAAAA,2BAA2B,CAACJ,IAA5B,CAAiCA,IAAjC;AACH;AACJ;;AACDH,QAAAA,oCAAoC,CAACmB,GAArC,CAAyCb,yBAAzC,EAAoEC,2BAApE;;AACA,YAAI,CAACC,2CAAL,EAAkD;AAC9C;AACA,gBAAMV,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACY,YAAlC,EAAgDV,2BAA2B,CAACU,YAA5E,CAAtB;AACH,SAHD,MAIK;AACD;AACA,gBAAMtB,iBAAiB,CAACW,yBAAD,EAA4BD,KAAK,CAACY,YAAlC,EAAgDV,2BAA2B,CAACU,YAA5E,CAAvB;AACH;;AACD,cAAMlB,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCC,2BAAnC,CAA7B;AACA,eAAOA,2BAAP;AACH,OAtCgC;;AAAA,sBAA3BH,2BAA2B;AAAA;AAAA;AAAA,OAAjC;;AAuCA,WAAO;AACH,UAAIF,KAAJ,CAAUgB,KAAV,EAAiB;AACbhB,QAAAA,KAAK,GAAGgB,KAAR;AACH,OAHE;;AAIH,UAAIf,IAAJ,CAASe,KAAT,EAAgB;AACZf,QAAAA,IAAI,GAAGe,KAAP;AACH,OANE;;AAOHE,MAAAA,MAAM,CAACf,KAAD,EAAQC,yBAAR,EAAmC;AACrC,cAAMe,mCAAmC,GAAGrB,oCAAoC,CAACsB,GAArC,CAAyChB,yBAAzC,CAA5C;;AACA,YAAIe,mCAAmC,KAAKE,SAA5C,EAAuD;AACnD,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,mCAAhB,CAAP;AACH;;AACD,eAAOjB,2BAA2B,CAACC,KAAD,EAAQC,yBAAR,CAAlC;AACH;;AAbE,KAAP;AAeH,GA1DD;AA2DH,CA5DM","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module"}